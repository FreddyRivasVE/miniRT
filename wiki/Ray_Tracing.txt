üî¨ Fundamento f√≠sico y matem√°tico
El Ray Tracing se basa en la √≥ptica geom√©trica, modelando c√≥mo los rayos de luz interact√∫an con los objetos. En lugar de simular todos los fotones que emite una fuente de luz (lo cual ser√≠a computacionalmente inviable), se lanza un rayo por cada p√≠xel desde la c√°mara hacia la escena. A partir de ah√≠:

Intersecci√≥n: Se calcula la primera superficie que el rayo encuentra usando algoritmos como el de intersecci√≥n rayo-tri√°ngulo (por ejemplo, el algoritmo de M√∂ller‚ÄìTrumbore).

Sombreado: Se eval√∫a el color del punto de intersecci√≥n considerando:

Reflexi√≥n especular (rayos reflejados).

Refracci√≥n (rayos transmitidos, seg√∫n la ley de Snell).

Sombra (rayos lanzados hacia las fuentes de luz para verificar oclusi√≥n).

Recursividad: Los rayos reflejados y refractados generan nuevos rayos, lo que permite simular m√∫ltiples rebotes de luz.

üß† Componentes clave
Modelo de iluminaci√≥n: Se suelen usar modelos como Phong, Blinn-Phong o Cook-Torrance para calcular la interacci√≥n luz-material.

Materiales: Cada superficie tiene propiedades √≥pticas (√≠ndice de refracci√≥n, rugosidad, reflectividad) que afectan el comportamiento de los rayos.

Aceleraci√≥n: Para evitar comprobar intersecciones con todos los objetos, se usan estructuras como:

BVH (Bounding Volume Hierarchy)

KD-Trees

Grillas uniformes

Estas estructuras reducen dr√°sticamente el n√∫mero de pruebas de colisi√≥n necesarias.

‚öôÔ∏è Algoritmos relacionados
Path Tracing: Variante que lanza m√∫ltiples rayos aleatorios por p√≠xel para simular iluminaci√≥n global (GI), incluyendo luz indirecta y ca√∫sticas.

Bidirectional Path Tracing: Combina rayos desde la c√°mara y desde la luz para mejorar la convergencia.

Metropolis Light Transport: T√©cnica basada en Monte Carlo que explora caminos de luz m√°s eficientes.

üßÆ C√°lculo de color

El color final de un p√≠xel se obtiene integrando la ecuaci√≥n del renderizado:

Lo(x, wo) = Le(x, wo) + ‚à´Œ© fr(x, wi, wo) * Li(x, wi) * (wi ‚Ä¢ n) dwi

Donde:

Lo: luz saliente
Le: luz emitida
fr: funci√≥n de distribuci√≥n bidireccional de reflectancia (BRDF)
Li: luz entrante
wi, wo: direcciones entrante y saliente
n: normal de la superficie


üß† Requisitos computacionales
El Ray Tracing es intensivo en c√≥mputo, por lo que se apoya en:

GPUs modernas con n√∫cleos dedicados (como los RT Cores de NVIDIA).

T√©cnicas de denoising para reducir el ruido en renderizados con pocos samples.

Paralelizaci√≥n masiva para lanzar millones de rayos simult√°neamente.

Mas informacion en:
https://www.jakobmaier.at/posts/raytracing/
https://drakeor.com/2021/06/14/simple-software-based-raytracer-in-c/
https://www.youtube.com/watch?v=2BLRLuczykM
