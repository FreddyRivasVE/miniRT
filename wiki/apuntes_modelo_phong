
## üí° MODELO COMPLETO DE PHONG

El modelo de iluminaci√≥n de **Phong** simula c√≥mo se comporta la luz cuando choca con una superficie. Tiene **tres componentes**:

---

### 1. ‚òÄÔ∏è **Luz ambiental (ambient light)**

* Ilumina todo por igual, incluso en sombras.
* Simula la luz reflejada por el entorno.
* **Constante**, no depende de la direcci√≥n.

```c
color_ambient = ambient_light_color * object_color;
```

---

### 2. üå§Ô∏è **Luz difusa (diffuse)**

* Simula la luz que **golpea una superficie mate (opaca)**.
* M√°s luz si el rayo de luz choca perpendicular a la superficie.
* Calculada con el **producto punto entre la normal y la direcci√≥n de la luz**:

```c
diffuse_intensity = max(dot(normal, light_dir), 0);
color_diffuse = diffuse_intensity * light_color * object_color;
```

---

### 3. ‚ú® **Luz especular (specular)**

* Simula **brillos**, como el reflejo en un objeto pulido o met√°lico.

* Depende del √°ngulo entre:

  * la direcci√≥n a la c√°mara (**view\_dir**),
  * y la direcci√≥n de la **reflexi√≥n de la luz** (**reflect\_dir**).

* F√≥rmula:

```c
reflect_dir = reflect(-light_dir, normal);
specular_intensity = pow(max(dot(view_dir, reflect_dir), 0.0), shininess);
color_specular = specular_intensity * light_color * specular_strength;
```

* `shininess`: n√∫mero grande = reflejo m√°s n√≠tido.
* `specular_strength`: cu√°nto influye la especular en total.

---

## üé® ¬øC√≥mo saber si una superficie es opaca, pulida o met√°lica?

En **miniRT**, vos como programadora ten√©s que definir eso.

### En la versi√≥n b√°sica:

* No se diferencia entre materiales.
* Solo us√°s el color del objeto y aplic√°s ambient + diffuse.

### En el **bonus con Phong completo**, pod√©s:

#### üí° OPCI√ìN 1: Definir materiales manualmente en `.rt`

Agregar algo como:

```
sp 0,0,0 1 255,0,0  shininess:50 specular:0.3
pl 0,-1,0 0,1,0 128,128,128  shininess:5 specular:0.0
```

Y luego, cuando hac√©s el shading:

* Si `shininess` es bajo y `specular` ‚âà 0 ‚Üí superficie **opaca/mate**.
* Si `shininess` es alto y `specular` alto ‚Üí **pulida/met√°lica**.

#### üí° OPCI√ìN 2: Asumir materiales por objeto

Por ejemplo:

* Esfera ‚Üí material pulido.
* Plano ‚Üí material opaco.
* Cilindro ‚Üí met√°lico.

Esto es m√°s limitado, pero m√°s simple.

---

### üß† Resumen visual:

| Superficie        | ¬øRefleja luz difusa? | ¬øRefleja luz especular? | Valores t√≠picos                      |
| ----------------- | -------------------- | ----------------------- | ------------------------------------ |
| Opaca (mate)      | ‚úÖ S√≠                 | ‚ùå No                    | `specular = 0.0`, `shininess = 5`    |
| Pulida (pl√°stico) | ‚úÖ S√≠                 | ‚úÖ S√≠                    | `specular = 0.3`, `shininess = 50`   |
| Met√°lica          | ‚ùå Poco diffuse       | ‚úÖ Mucha specular        | `specular = 0.7`, `shininess = 100+` |

---

## üé® ¬øQu√© pasa si la luz tiene color?

Cuando una luz tiene color (por ejemplo, roja, azul, amarilla), **ese color se mezcla con el color del objeto**, modificando el resultado final del shading (iluminaci√≥n).

---

### üß† ¬øC√≥mo se calcula?

Supongamos que:

* La luz es **roja** ‚Üí `light_color = (1.0, 0.0, 0.0)`
* El objeto es **blanco** ‚Üí `object_color = (1.0, 1.0, 1.0)`

Entonces:

* La **luz difusa** se calcula como:

  ```c
  diffuse = light_color * object_color * intensidad
          = (1.0, 0.0, 0.0) * (1.0, 1.0, 1.0) * intensidad
          = (intensidad, 0.0, 0.0) // Solo rojo
  ```

Resultado: **el objeto blanco se ver√° rojizo si lo ilumina una luz roja**.

---

### üí° Ejemplo con Phong completo

Supongamos:

* `light_color = (0.5, 0.8, 1.0)` (celeste claro)
* `object_color = (1.0, 0.0, 0.0)` (rojo)
* `diffuse_intensity = 0.7`
* `specular_intensity = 0.3`

Entonces:

```c
color_diffuse = light_color * object_color * diffuse_intensity
              = (0.5, 0.8, 1.0) * (1.0, 0.0, 0.0) * 0.7
              = (0.35, 0.0, 0.0)  // Solo se mezcla el rojo

color_specular = light_color * specular_intensity * specular_strength
               = (0.5, 0.8, 1.0) * 0.3 * 0.5
               = (0.075, 0.12, 0.15)  // Celeste brillante
```

### Resultado final:

```c
final_color = ambient + diffuse + specular
```

El objeto se ver√° rojo con brillos celestes, porque **el color de la luz especular no depende del color del objeto**, solo de la luz.

---

## üõ†Ô∏è ¬øC√≥mo se usa en miniRT?

En el archivo `.rt` pod√©s tener luces con color, como:

```
L 10,10,10 0.8 255,200,100
```

Esto significa:

* Posici√≥n: `10,10,10`
* Intensidad: `0.8`
* Color: RGB amarillo-anaranjado

Ten√©s que **convertir el color de luz a valores entre 0.0 y 1.0** al usarlo en los c√°lculos.

---

### üéØ En resumen:

| Tipo de luz  | ¬øColor influye? | ¬øC√≥mo afecta?                                    |
| ------------ | --------------- | ------------------------------------------------ |
| **Ambient**  | ‚úÖ S√≠            | Mezclado con color del objeto                    |
| **Diffuse**  | ‚úÖ S√≠            | Se mezcla con color del objeto                   |
| **Specular** | ‚úÖ S√≠            | Refleja el **color de la luz**, no el del objeto |

---

